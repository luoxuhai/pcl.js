# We build our DevContainer on MS' Typescript-Node Devcontainer
# This gives us lots of standard stuff, and lets us layer a few custom things on top, like the Emscripten compiler, Puppeteer

# --------------------------------------------------------------------
# BEGIN Standard MS Devcontainer for Typescript-Node 

# See here for image contents: https://github.com/microsoft/vscode-dev-containers/tree/main/containers/typescript-node/.devcontainer/base.Dockerfile
# [Choice] Node.js version (use -bullseye variants on local arm64/Apple Silicon): 18, 16, 14, 18-bullseye, 16-bullseye, 14-bullseye, 18-buster, 16-buster, 14-buster
ARG VARIANT=16-buster

FROM mcr.microsoft.com/vscode/devcontainers/typescript-node:${VARIANT}

# [Optional] Uncomment this section to install additional OS packages.
# RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \
#     && apt-get -y install --no-install-recommends <your-package-list-here>

# [Optional] Uncomment if you want to install an additional version of node using nvm
# ARG EXTRA_NODE_VERSION=10
# RUN su node -c "source /usr/local/share/nvm/nvm.sh && nvm install ${EXTRA_NODE_VERSION}"

# END Standard MS Devcontainer for Typescript-Node 
# --------------------------------------------------------------------

# --------------------------------------------------------------------
# BEGIN EMSDK 
# Install EMSDK to /emsdk just like the EMSDK Dockerfile: https://github.com/emscripten-core/emsdk/blob/master/docker/Dockerfile
ENV EMSDK /emsdk
# We pin the EMSDK version rather than 'latest' so that everyone is using the same compiler version
ENV EMSCRIPTEN_VERSION 3.1.21

RUN git clone https://github.com/emscripten-core/emsdk.git $EMSDK

RUN echo "## Install Emscripten" \
  && cd ${EMSDK} \
  && ./emsdk install ${EMSCRIPTEN_VERSION} \
  && echo "## Done"

# Copied directly from https://github.com/emscripten-core/emsdk/blob/master/docker/Dockerfile
# This generates configuration that contains all valid paths according to installed SDK
# TODO(sbc): We should be able to use just emcc -v here but it doesn't
# currently create the sanity file.
RUN cd ${EMSDK} \
  && echo "## Generate standard configuration" \
  && ./emsdk activate ${EMSCRIPTEN_VERSION} \
  && chmod 777 ${EMSDK}/upstream/emscripten \
  && chmod -R 777 ${EMSDK}/upstream/emscripten/cache \
  && echo "int main() { return 0; }" > hello.c \
  && ${EMSDK}/upstream/emscripten/emcc -c hello.c \
  && cat ${EMSDK}/upstream/emscripten/cache/sanity.txt \
  && echo "## Done"

ENV PATH $EMSDK:$EMSDK/upstream/emscripten/:$PATH

# Copied directly from https://github.com/emscripten-core/emsdk/blob/master/docker/Dockerfile
# Cleanup Emscripten installation and strip some symbols
RUN echo "## Aggressive optimization: Remove debug symbols" \
  && cd ${EMSDK} && . ./emsdk_env.sh \
  # Remove debugging symbols from embedded node (extra 7MB)
  && strip -s `which node` \
  # Tests consume ~80MB disc space
  && rm -fr ${EMSDK}/upstream/emscripten/tests \
  # Fastcomp is not supported
  && rm -fr ${EMSDK}/upstream/fastcomp \
  # strip out symbols from clang (~extra 50MB disc space)
  && find ${EMSDK}/upstream/bin -type f -exec strip -s {} + || true \
  && echo "## Done"

RUN echo ". /emsdk/emsdk_env.sh" >> /etc/bash.bashrc
# We must set the EM_NODE_JS environment variable for a somewhat silly reason
# We run our build scripts with `npm run`, which sets the NODE environment variable as it runs.
# The EMSDK picks up on that environment variable and gives a deprecation warning: warning: honoring legacy environment variable `NODE`.  Please switch to using `EM_NODE_JS` instead`
# So, we are going to put this environment variable here explicitly to avoid the deprecation warning.
RUN echo 'export EM_NODE_JS="$EMSDK_NODE"' >> /etc/bash.bashrc

# END EMSDK
# --------------------------------------------------------------------

RUN apt-get update \
  && apt-get install -y \
  && cmake \
  && npm install --global yarn n

ENV NODE_VERSION 16.17.0

RUN n ${NODE_VERSION}